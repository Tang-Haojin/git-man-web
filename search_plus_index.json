{"./":{"url":"./","title":"Git 使用规范手册","keywords":"","body":"Git 使用规范手册 这是一本简易 Git 使用规范手册, 包括入门、基本操作、开发流程和规范和进阶操作四部分. 入门章节主要包括 Git 简介和安装; 基本操作章节则介绍了使用 Git 的常用命令; 开发流程和规范章节以一个例子出发介绍了一种典型的开发流程, 并且介绍了一种提交规范; 进阶操作章节则介绍了一些可能会使 Git 使用起来更方便快捷的命令. 由于时间匆忙, 书中难免会出现一些错误, 欢迎读者批评指正. 本书由唐浩晋, 高泽宇和陈璐共同撰写, 并由唐浩晋整合和维护. 唐浩晋·高泽宇·陈璐 2021京ICP备20000818号-2该文件修订时间： 2021-07-18 18:08:43 "},"入门/":{"url":"入门/","title":"入门","keywords":"","body":"入门 本章节将主要介绍 git 的概念、作用和特点, 并将简单介绍安装 git 的方法. 唐浩晋·高泽宇·陈璐 2021京ICP备20000818号-2该文件修订时间： 2021-07-10 23:59:03 "},"入门/Git简介.html":{"url":"入门/Git简介.html","title":"Git 简介","keywords":"","body":"Git 简介 Git 是一种分布式版本控制系统, 它是一种分布式的, 能够记录一个或多个文件内容变化的, 并且能够在将来查阅特定历史版本和修订情况的系统. 其在源代码文件的版本控制中得到了广泛应用, 但实际上, 你也可以使用 Git 来管理图片、日志、文档 (正如本教程一样) 等一切文件. 早期的版本控制系统通常是本地化或集中化的, 但这样的后果通常在于, 如果遇到本地磁盘损坏, 或是中心服务器出现故障, 那么数据的可用性将会受到影响, 甚至于出现丢失所有记录的风险. Git - 分布式版本控制系统 Git 作为一种分布式的版本控制系统, 其每一个客户端都拥有完整的版本仓库, 理论上任何一个版本仓库都可以作为远程仓库使用. 因此, 就算某一远程服务器故障, 丢失的数据也可以很容易地使用任意一个客户端上的仓库进行恢复. 除此以外, 其分布式的特性也为其协作共享带来了便利. 你不仅可以随时切换追踪的远程仓库, 而且还可以在同一个仓库中追踪多个远程仓库, 从而达到与不同小组的人进行协作的目的. 唐浩晋·高泽宇·陈璐 2021京ICP备20000818号-2该文件修订时间： 2021-07-11 00:19:06 "},"入门/Git安装.html":{"url":"入门/Git安装.html","title":"Git 安装","keywords":"","body":"Git 安装 本节将主要介绍 Debian/Ubuntu 和 Windows 下的安装方法, 其余 Linux/Unix 版本的安装方法参见Git. [!TIP] 较新版本的 macOS 应该自带了 Git, 你可以尝试在终端中键入 git --version. 如果命令输出类似于 git version 2.xx.x, 则说明 Git 已经安装在你的计算机上. Debian/Ubuntu 在基于 Debian 的 Linux 发行版中, 例如 Debian, Ubuntu, 或是 KDE Neon, 可以使用 apt: $ sudo apt install git 从源代码安装 或者, 也许你会更倾向于使用最新的 Git 版本. 在这种情况下, 你需要先安装依赖: $ sudo apt install dh-autoreconf libcurl4-gnutls-dev libexpat1-dev gettext $ sudo apt install libz-dev libssl-dev install-info $ sudo apt install asciidoc xmlto docbook2x 然后, 从GitHub 网站上获取最新的源代码压缩包, 并进行解压、编译和安装: $ tar -zxf git-2.xx.x.tar.gz $ cd git-2.xx.x $ make configure $ ./configure --prefix=/usr $ make all doc info $ sudo make install install-doc install-html install-info Windows 在 Windows 上, 你可以在 https://git-scm.com/download/win 上直接下载官方版本进行安装. [!TIP] 如果你的 Windows 上安装有 winget 软件包管理器, 你也可以通过 winget install git 命令来安装. 唐浩晋·高泽宇·陈璐 2021京ICP备20000818号-2该文件修订时间： 2021-07-11 15:11:24 "},"基本操作/":{"url":"基本操作/","title":"基本操作","keywords":"","body":"基本操作 本章将会介绍 Git 的基本使用方法, 主要内容分为: 从本地建立仓库 本地与远程仓库的交互 唐浩晋·高泽宇·陈璐 2021京ICP备20000818号-2该文件修订时间： 2021-07-11 16:38:02 "},"基本操作/从本地建立仓库.html":{"url":"基本操作/从本地建立仓库.html","title":"从本地建立仓库","keywords":"","body":"从本地建立仓库 本节将介绍 Git 本地仓库的建立和基本使用方法. 初始化 git init 在指定目录下执行 git init, 就可以创建一个 git 版本库. 此时 git 相关信息存储在 .git 目录中. 记录更新到仓库 git add : 跟踪新文件, 暂存已修改的文件. 该命令会将文件或者目录 (以及其下的所有文件) 添加到暂存区 (stage) 中. git commit [-m ]: 将当前暂存区的修改提交至版本库. 该命令会打开一个文本编辑器来输入提交说明. -m : 将 message 作为提交说明, 而不再打开文本编辑器. [!TIP]启动的编辑器是通过 Shell 的环境变量 EDITOR 指定的，一般默认为 vim. 如果想要自定义打开的文本编辑器, 可以使用 git config --global core.editor 命令来设置. git rm [--cached|-f] : 将文件或路径从 git 和工作区移除. --cached: 不要将文件从工作区移除. -f: 即使指定的路径存在暂存或未暂存的更改, 仍然执行. git mv : 将文件在 git 中移动/重命名. 该操作完全等价于: mv git rm git add 查看信息 git status: 检查当前文件状态. 这些状态包括但不限于: 修改过但尚未暂存的文件 暂存过但尚未提交的文件 尚未跟踪的文件 新加入暂存区的文件 从暂存区删除的文件 暂存区中移动/重命名的文件 git diff [args]: 比较代码的差异. 默认比较暂存区和工作区的差异. git diff [commit ID 2]: 比较指定提交之间的差异. 如果没有指定 commit ID 2, 则比较指定提交与工作区的差异. git diff --cached [commit ID]: 比较暂存区和目标提交的差异. 如果没有指定 commit ID, 则默认和最近一次提交比较. git log: 查看历史提交记录 ls-files: 查看暂存区追踪的文件 分支管理 git branch [branch name]: 列出所有本地分支. branch name: 创建名为 branch name 的新分支, 停留在当前分支. git checkout [-b] : 切换到 branch 分支. -b: 创建新分支，并切换到该分支中. git merge [branch]: 将远程分支合并到当前分支. branch: 将 branch 分支合并到当前分支. 唐浩晋·高泽宇·陈璐 2021京ICP备20000818号-2该文件修订时间： 2021-07-11 16:37:52 "},"基本操作/本地与远程仓库的交互.html":{"url":"基本操作/本地与远程仓库的交互.html","title":"本地与远程仓库的交互","keywords":"","body":"本地与远程仓库的交互 为本地仓库添加远程仓库 要将本地仓库推送到远程仓库, 首先要为本地仓库添加远程仓库: $ git remote add 例如, 如果你在 GitHub 上有一个名为 git-test 的仓库, 那么你可以运行: git remote add origin git@github.com:Tang-Haojin/git-test.git [!NOTE] 这里的远程仓库采用的是 ssh 协议. 理论上你也可以使用其他协议, 如 http(s), 但介于 https 协议已经被 GitHub 标记为过时, 因此我们在此不作介绍. 将本地分支推送到远程仓库 将本地分支推送到远程仓库的命令是: $ git push [options] 当你第一次为本地分支推送时, 你需要为本地分支设置跟踪的远程仓库, 此时需要运行: $ git push -u 其中 remote 为远程仓库的名字, 例如 origin. 此后进行推送时, 将不再需要指定 -u 参数, 只需运行 git push 即可. [!NOTE] 此处 origin 并没有任何特殊含义, 只是如果你从远程仓库克隆仓库到本地, 那么该远程仓库将被默认命名为 origin. 你完全可以在之后通过 git remote rename 命令重命名任何一个远程仓库, 也可以在你添加远程仓库的时候指定任何你喜欢的名字. 使用密钥对 然而, 当你尝试 push 你的本地分支到远程仓库时, 你很有可能会得到这样的命令输出: $ git push -u origin master git@github.com: Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 这通常是因为 ssh 协议需要你在本地和远程仓库分别用有对应的私钥和公钥. 要查看你是否在本地有密钥对, 通常可以通过 $ ls ~/.ssh 命令来查看. 如果存在类似 id_*(无后缀) 和 id_*.pub 的两个文件, 则说明你在本地已经拥有了密钥对了. 创建密钥对 如果你在本地还没有密钥对, 你可以通过 $ ssh-keygen -t ed25519 -C 来创建密钥对. 在之后的步骤中直接按下回车, 你可以在 ~/.ssh 目录下得到 id_ed25519 和 id_ed25519.pub 两个文件, 其中 id_ed25519 为私钥, 你应该妥善保管它, 不能让除你以外的任何人得到. 将公钥添加到远程仓库 不同的仓库托管平台有不同的添加公钥的方法. 以 GitHub 为例, 你首先需要复制你的公钥: cat ~/.ssh/id_ed25519.pub 然后在 https://github.com/settings/keys 中点击 \"New SSH key\" 按钮, 将你刚刚复制的公钥粘贴进去即可. 唐浩晋·高泽宇·陈璐 2021京ICP备20000818号-2该文件修订时间： 2021-07-18 18:03:24 "},"开发流程和规范.html":{"url":"开发流程和规范.html","title":"开发流程和规范","keywords":"","body":"开发流程和规范 在创建一个git项目时, 默认会得到一个 master 分支. 如果 master 分支已经被发布, 但我们又需 要开发新的功能, 那么此时并不方便在 master 分支上直接进行修改. 一个比较好的策略是: 创建一个 develop 分支作为开发主线. 开发时以 develop 分支为基础, 新建临时分支. 在临时分支上开发完毕后, 再合并回 develop 分支. 当 develop 分支经过充分的测试和验证后, 再将 develop 分支合并回 master 分支. 为了更好地说明开发流程, 我们来看一个简单的例子. 一个例子 假设此时你正在写一个 CPU, 现在你的仓库如下图的初始状态所示, 已经有了三个提交, 并且目前 master 分支和 develop 分支均位于 Commit 2 提交上. 你现在位于 develop 分支上. 新增功能 现在, 你需要为你的 CPU 添加 cache. 为了开发这一新功能, 你选择新建并切换到一个名为 feat-cache 的分支: $ git checkout -b feat-cache Switched to a new branch \"feat-cache\" 在经历了一段时间的开发后, 你在 feat-cache 分支上已经有了一些提交, 并且有一些未提交的更改. 此时仓库如下图所示. 突发需求 就在这时, 不幸的事情发生了: X老师微信私戳你说 master 上有一个 bug, 这个 bug 会让你的 CPU 在执行 fence 指令的时候出现错误. 这个 bug 十分严重, 需要你立刻修复! 你一拍脑袋, 啊, 原来你当初忘记实现这个指令了! 为了修复这个 bug, 你在将当前手头的工作放下, 将工作区压入栈中: $ git stash Saved working directory and index state WIP on feat-cache: af95720 然后, 你在 develop 分支上 checkout 了一个名为 hot-fix 的本地分支来修复这个 bug: $ git checkout develop Switched to branch 'develop' Your branch is up to date with 'origin/develop'. $ git checkout -b hot-fix Switched to a new branch 'hot-fix' 并在这个分支上进行紧急修复. 由于目前你的 CPU 还只是一个顺序 CPU, 因此只需要将 fence 指令解析为 nop 即可. 确定了修复的方案, 你于是三下五除二地修好了这个 bug. 测试无误后, 你暂存并提交了你的修改: $ git add . $ git commit -m \"fix: `fence` not implemented\" [hotfix 1a80fb7] fix: `fence` not implemented 2 file changed, 7 insertions(+) 这时, 你的仓库如下图所示. 时间就是金钱. 你将 hot-fix 分支合并进 develop 分支, 并将本地分支提交到远程仓库: $ git checkout develop Switched to branch 'develop' Your branch is up to date with 'origin/develop'. $ git merge hot-fix Updating 7ae3f90..1a80fb7 Fast-forward decode.scala | 4 ++++ RVI.scala | 3 +++ 2 file changed, 7 insertions(+) $ git push Counting objects: 7, done. Delta compression using up to 12 threads. Compressing objects: 100% (3/3), done. Writing objects: 100% (3/3), 2.33 KiB | 0 bytes/s, done. Total 3 (delta 2), reused 0 (delta 0) To https://github.com/yourname/yourcpu 7ae3f90..1a80fb7 develop -> develop updating local tracking ref 'refs/remotes/origin/develop' 为了让用户获得这个修复, 你将 develop 分支合并到 master 分支, 并将其推送到远程仓库: $ git checkout master Switched to branch 'master' Your branch is up to date with 'origin/master'. $ git merge develop Updating 7ae3f90..1a80fb7 Fast-forward decode.scala | 4 ++++ RVI.scala | 3 +++ 2 file changed, 7 insertions(+) $ git push Total 0 (delta 0), reused 0 (delta 0) To https://github.com/yourname/yourcpu 7ae3f90..1a80fb7 master -> master updating local tracking ref 'refs/remotes/origin/master' 呼! 你长舒一口气, 这个 bug 修好了, 你可以继续回到你的 feat-cache 分支上工作了. 哦对了, 既然 bug 修复好了, 那么 hot-fix 分支也完成了它的使命, 是时候删除它了: $ git branch -d hot-fix Deleted branch hot-fix (was 1a80fb7). 这时候, 你的仓库如下图所示. 合并修补 你发现, 这个 bug 虽然在 master 和 develop 分支中被修复了, 但 feat-cache 分支却仍然是有 bug 的版本! 因此, 你需要先将 develop 分支并入 feat-cache 分支, 然后再进行下一步工作: $ git checkout feat-cache Switched to branch 'feat-cache' $ git merge develop Merge made by the 'recursive' strategy. decode.scala | 4 ++++ RVI.scala | 3 +++ 2 file changed, 7 insertions(+) 等等, 这和之前的合并好像有些不太一样? 原来, 此时要合并的两个分支 develop 和 feat-cache 在 Commit 2 处发生了分岔, develop 不再是 feat-cache 的直接历史了. 在这种情况下, git 会做一些额外的工作: 根据 develop 指向的提交 Commit 5, feat-cache 指向的提交 Commit 4 和产生分岔的提交 Commit 2 这三个提交生成一个新的合并提交 Commit 6, 如下图所示. 你嘬了一口咖啡, 心想: 终于可以继续写 cache 了. 完成开发 在经历了一段时间的敏捷开发后, 你成功地完成了 cache 的开发, 于是你心怀激动地输入: $ git commit -m \"feat: cache implemented and involved by default\" 在经过仔细验证后, 你觉得应该没有什么 bug 了, 于是你决定将其并入 develop 分支: $ git checkout develop $ git merge feat-cache 经历了上一次紧急修补 bug 的教训, 你想了想, 稳妥起见, 还是先不把 develop 分支并入 master 分支, 等经过更多人和更充分的测试后再说吧. 这时, 你的仓库应当如下图所示. 开发规范 看完上述例子过后, 我们可以总结出这样的开发规范: 分支规范 master 分支一般为发布分支, 其应当能够正常工作, 且经过充分的评估和测试. 一般不会在该分支上开发. develop 分支为开发分支, 其应当能够工作. 所有的开发工作都应该基于它, 但一般不会直接在该分支上开发. 开发时应该基于 develop 分支新建一个开发分支, 其命名应当遵循一定的约定且有意义, 如 fix-23, feat-pipeline 等. 开发过程中应该经常同步本地的 develop 分支, 并将其合并入开发分支. 开发结束后, 将开发分支并入 develop 分支, 并将开发分支删除. 在经过充分评估和测试后, 才可以将 develop 分支并入 master 分支. 提交信息规范 提交信息只能有 header, body, footer 三部分组成, 每部分间用空行分隔, body 和 footer 是可选的: [body] [footer] header header 只有一行，包括 type, scope 和 subject 三个字段，其中 scope 为可选项: [scope]: type: 用于说明 commit 类型，一般分为以下几种: build: 与构建流程等有关的改动 feat: 新增 feature fix: 修复 bug chore: 日常维护 test: 增加测试或修改已有测试 refactor: 不改变行为的, 对代码结构的改动 style: 对代码风格的改动 (仅限缩进, 空行一类的简单改动) cosm: 对界面的纯视觉上的改动 docs: 对文档和注释的改动 perf: 与性能相关的改动 ci: 与 CI 配置文件或脚本有关的改动 scope: 用于说明此次commit影响的范围 description: 对代码变更的简短总结 body 可以使用 body 来说明此次修改的动机和修改前后程序的行为差异 footer 如果包含不兼容的修改, 则需要在 footer 部分提及, 以 BREAKING CHANGE 开头, 并写入对修改的描述和迁移方法: BREAKING CHANGE: 同时, 如果更改涉及类似 GitHub 中的 issues 时, 也可以在 footer 部分提及: Fixes # 提交粒度规范 提交的粒度需要以功能点为单位, 每次实现新功能后进行提交, 并遵循以下原则: 将离散的任务划分到多次 commit 操作中, 比如修复了两个不同的 bug 需要进行两次提交 在提交之前对提交结果进行充分测试，不要提交未完成的工作 [!TIP] 通常可以不严谨地认为, 如果你在编写提交信息时遇到了困难, 那就说明提交的粒度太大. 上面两点对提交粒度进行了约束, 每一次提交都是一个最小的功能单元. [!NOTE] 事实上, 以上提到的规范基于且符合 约定式提交. 约定式提交是一种与 Angular 规范 类似, 但更加宽松的提交规范. 这里我们采用约定式提交是为了在规范的同时保留一些灵活性. 文件追踪规范 忽略操作系统自动生成的文件, 比如缩略图等. 忽略编译生成的中间文件、可执行文件等, 也就是如果一个文件是通过另一个文件自动生成的, 那自动生成的文件就没必要放进版本库, 比如 Java 编译产生的 .class 文件. 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件. 唐浩晋·高泽宇·陈璐 2021京ICP备20000818号-2该文件修订时间： 2021-07-10 17:49:38 "},"进阶操作.html":{"url":"进阶操作.html","title":"进阶操作","keywords":"","body":"进阶操作 读到这里, 你应该已经可以规范地使用 git 来进行开发了. 但是, 你可能会遇到一些让你棘手的问题: 提交信息不小心写错了 想要将另一个分支的某个文件“复制”到当前分支 只想将工作区某文件的一部分修改暂存 不小心暂存了不想暂存的文件, 想要取消暂存 想要将某个文件还原到最近一次提交的状态 撤回一次或多次提交 只想合并部分 commit 到另一个分支 commit 太过零碎, 想要把多个 commit 合为一个, 或是跳过某些 commit 要想简单方便地解决这些问题, 就需要用到一些进阶的操作了. 对已有的 commit 进行修改 修正最近的一次 commit 如果你发现, 最新的 commit 存在一些错误, 想要对其进行一些修正, 那么只需要将修改好的文件暂存, 然后运行 git commit --amend 即可. 但是, 如果你想修改好几次提交之前的错误, 那就只能够先撤回 commit 了. 撤回最新的 commit 要撤回最新的 commit, 可以使用 git reset --hard HEAD^ 命令. 撤回连续的多个 commit 如果要撤回多个 commit, 则可以使用 git reset --hard HEAD~n 命令, 其中 n 代表撤回 commit 的个数. 除此之外, 我们还可以使用 git rebase -i HEAD~n 命令来交互式地对之前的 n 次 commit 进行修改, 合并, 跳过等操作. 合并分支中的部分提交 git merge 会将所有的更改都合并到当前分支, 但有时我们只想合并部分 commit 到当前分支. 这种情况下, 我们可以使用 git cherry-pick 命令. 通过 git cherry-pick 可以将指定提交合并到当前分支, 并在当前分支产生一个新的提交. 当然, 我们也可以一次性合并多个提交, 只需同时指定多个提交即可. 如果想要合并某几个连续的提交到当前分支, 可以执行 git cherry-pick .. 命令. commit 1 必须早于 commit 2, 并且 commit1 将不被合并, commit2 将被合并. 将某分支某文件“复制”到当前分支 git checkout 除了可以用于切换分支以外, 还可以用于将某分支的某文件“复制”到当前分支. 只需使用 git checkout [branch-src] -- 即可. 这条命令会将 branch-src 分支或提交的 file 文件复制到当前工作区之中. 如果省略了 branch-src 参数, 则默认指定为当前分支的最近一次提交. 暂存某个文件的一部分改动 通过 git add -p 可以暂存文件的特定部分. 例如: $ git add -p playground/sim/src/cpu/csrcs/uart.cpp diff --git a/playground/sim/src/cpu/csrcs/uart.cpp b/playground/sim/src/cpu/csrcs/uart.cpp index 4d20a84..7f6caa1 100644 --- a/playground/sim/src/cpu/csrcs/uart.cpp +++ b/playground/sim/src/cpu/csrcs/uart.cpp @@ -5,7 +5,26 @@ #define FIFO_SIZE 1024 static char fifo[FIFO_SIZE] = {0}; static short head = 0, tail = 0; -bool uart_isRunning = false; +static bool uart_isRunning = false, divisor_latch = false; +static bool receive_interrupt = false; +static char scratch = 0; + +enum { + Receive_Holding = 0b000, + Interrupt_Status = 0b010, + Line_Status = 0b101, + Modem_Status = 0b110, + Scratchpad_Read = 0b111 +}; // READ MODE + +enum { + Transmit_Holding = 0b000, + Interrupt_Enable = 0b001, + FIFO_control = 0b010, + Line_Control = 0b011, + Modem_Control = 0b100, + Scratchpad_Write = 0b111 +}; // WRITE MODE pthread_t thread_in; pthread_mutex_t mutex_fifo_opt = PTHREAD_MUTEX_INITIALIZER; (1/3) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? 输入 ? 可以查看使用帮助: y - stage this hunk n - do not stage this hunk q - quit; do not stage this hunk or any of the remaining ones a - stage this hunk and all later hunks in the file d - do not stage this hunk or any of the later hunks in the file g - select a hunk to go to / - search for a hunk matching the given regex j - leave this hunk undecided, see next undecided hunk J - leave this hunk undecided, see next hunk e - manually edit the current hunk ? - print help 我们将第一部分暂存, 而跳过剩余的部分, 则最终的效果为: $ git status On branch pipeline Your branch is up to date with 'gitlab/pipeline'. Changes to be committed: (use \"git restore --staged ...\" to unstage) modified: playground/sim/src/cpu/csrcs/uart.cpp Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git restore ...\" to discard changes in working directory) modified: playground/sim/src/cpu/AXI_UART.scala modified: playground/sim/src/cpu/csrcs/uart.cpp modified: playground/src/cpu/privileged/CSRs.scala 可以看到, 我们仅暂存了该文件的一部分. git rebase git rebase 是一个十分强大的命令, 其使用场景与 git merge 十分类似. 该指令首先会寻找当前分支与 branch 分支的最近公共祖先, 之后将当前分支 从该祖先节点开始的所有提交全部移动到 branch 分支的顶端. git rebase 与 git merge 的区别 为了更清晰地说明这二者的区别, 我们回到之前的例子. 方便起见, 我们将图重新搬到下面. 执行 git merge 后的结果如下图所示: 执行 git rebase 后的结果如下图所示: 当然, git rebase 还有更多的高级用法, 有兴趣的读者可以进一步了解. 唐浩晋·高泽宇·陈璐 2021京ICP备20000818号-2该文件修订时间： 2021-07-10 17:49:38 "}}